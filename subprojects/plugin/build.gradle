plugins {
    id 'com.jfrog.bintray' version '1.6'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'checkstyle'
    id 'findbugs'
    id 'jacoco'
    id 'maven'
    id 'maven-publish'
}

defaultTasks 'clean', 'build', 'install'

configurations {
    all {
        resolutionStrategy {
            force 'org.hamcrest:hamcrest-core:1.3'
        }
    }
}

dependencies {
    compile gradleApi()
    compile 'net.java.dev.javacc:javacc:6.1.2'
    compile('commons-io:commons-io:2.4') {
        force = true
    }
    compile 'org.apache.commons:commons-lang3:3.4'
    
    testCompile('junit:junit:4.12') {
        force = true
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
}

eclipse {
    project {    
        name = 'javacc-gradle-plugin'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/config/checkstyle/checks.xml")
}

findbugs {
    toolVersion = '3.0.1'
    sourceSets = [sourceSets.main, sourceSets.test]
    effort = "min"
    ignoreFailures = false
    reportLevel = "high"
    excludeFilter = file("${rootProject.projectDir}/config/findbugs/exclude.xml")
}

tasks.withType(FindBugs) {
    maxHeapSize = project.hasProperty('findBugsHeapSize') ? project.findBugsHeapSize : '1g'
    
    reports {
        xml.enabled false
        html.enabled true
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n')
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) { 
     classifier = 'javadoc' 
     from javadoc.destinationDir 
} 

artifacts {
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            
            pom.withXml {
                asNode().appendNode('name', project.getName())
                asNode().appendNode('description', 'Provides the ability to use JavaCC with Gradle. Compiles JavaCC files to Java.')
                asNode().appendNode('url', 'https://github.com/ypoluektovich/javaccPlugin')
                
                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The MIT License (MIT)')
                license.appendNode('url', 'http://opensource.org/licenses/MIT')
                license.appendNode('distribution', 'repo')
                
                def scm = asNode().appendNode('scm')
                scm.appendNode('url', 'https://github.com/ypoluektovich/javaccPlugin')
                scm.appendNode('connection', 'scm:https://github.com/ypoluektovich/javaccPlugin.git')
                scm.appendNode('developerConnection', 'scm:git://github.com/ypoluektovich/javaccPlugin.git')
                
                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'jmartel')
                developer.appendNode('name', 'Jonathan Martel')
                developer.appendNode('email', 'jonathan.martel@coglinc.ca')
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayApiKey

    publications = ['maven']
    dryRun = false
    publish = true
    pkg {
        repo = 'third-party'
        name = 'javacc-gradle-plugin'
        desc = 'Provides the ability to use JavaCC via Gradle. If the java plugin is also applied, JavaCompile tasks will depend upon the compileJavacc task.'
        websiteUrl = 'https://github.com/ypoluektovich/javaccPlugin'
        issueTrackerUrl = 'https://github.com/ypoluektovich/javaccPlugin/issues'
        vcsUrl = 'https://github.com/ypoluektovich/javaccPlugin.git'
        licenses = ['MIT']
        labels = ['javacc', 'gradle']
        publicDownloadNumbers = true
        
        version {
            name = project.version
            released = new Date()
            vcsTag = 'v' + project.version
        }
    }
}
